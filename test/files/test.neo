class Test
    static method fib(lim: int) -> int
        if lim == 0 then return 0 end
        let a: int = 0
        let b: int = 0
        let n: int = 0
        while n < lim do
            print(a)
            let c: int = a + b
            a = b
            b = c
            n += 1
        end
    end

    # Returns the unsigned quotient of dividing self by
    # the second argument, where each argument and the result is interpreted as
    # an unsigned value.
    method divideUnsigned(divisor: int) -> int
        if division >= 0 then
            let q: int = (self >>>> 1) / divisor << 1
            let r: int = self - q * divisor
            return q + ((r | ~(r - divisor)) >>>> 63)
        end
        return (self & ~(self - divisor)) >>>> 63
    end

    # Returns the unsigned remainder from dividing <self>
    # by the second argument, where each argument and the result is interpreted
    # as an unsigned value.
    method remainderUnsigned(divisor: int) -> int
        if divisor >= 0 then
            let q: int = (self >>>> 1) / divisor << 1
            let r: int = self - q * divisor
            return r - ((~(r - divisor) >> 63) & divisor)
        end
        return self - (((self & ~(self - divisor)) >> 63) & divisor)
    end

    # Returns the number of one-bits in the two's complement binary representation of <self>.
    method popCount() -> int
        let i: int = self
        i = i - ((i >>>> 1) & 0x5555555555555555)
        i = (i & 0x3333333333333333) + ((i >>>> 2) & 0x3333333333333333)
        i = (i + (i >>>> 4)) & 0x0f0f0f0f0f0f0f0f
        i = i + (i >>>> 8)
        i = i + (i >>>> 16)
        i = i + (i >>>> 32)
        return i & 0x7f
    end

    # Returns the value obtained by reversing the order of the bits in the
    # two's complement binary representation of <self>.
    method reverse() -> int
        let i: int = self
        i = (i & 0x5555555555555555) << 1 | (i >>>> 1) & 0x5555555555555555
        i = (i & 0x3333333333333333) << 2 | (i >>>> 2) & 0x3333333333333333
        i = (i & 0x0f0f0f0f0f0f0f0f) << 4 | (i >>>> 4) & 0x0f0f0f0f0f0f0f0f
        #return i.reverseBytes()
    end

    # Returns the value obtained by reversing the order of the bytes in the
    # two's complement representation of <self>.
    method reverseBytes() -> int
        let i: int = self
        i = (i & 0x00ff00ff00ff00ff) << 8 | (i >>>> 8) & 0x00ff00ff00ff00ff
        return (i << 48) | ((i & 0xffff0000) << 16) | ((i >>>> 16) & 0xffff0000) | (i >>>> 48)
    end
end
