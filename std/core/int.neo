# (c) Copyright Mario "Neo" Sieg 2023. All rights reserved. mario.sieg.64@gmail.com

class int
    # The maximum value of an int - (64-bit signed integer).
    static const MAX_VALUE: int = 0x7fffffffffffffff

    # The minimum value of an int - (64-bit signed integer).
    static const MIN_VALUE: int = 0x8000000000000000

    # The size of an int in bytes.
    static const BYTE_SIZE: int = 8

    # The size of an int in bits.
    static const BIT_SIZE: int = BYTE_SIZE * 8

    # Returns the lower 32-bits of <self>.
    func getLower32Bits() -> int
        return self & 0xffffffff
    end

    # Returns the upper 32-bits of <self>.
    func getUpper32Bits() -> int
        return (self >>>> 32) & 0xffffffff
    end

    # Returns a hash code which fits fully into 32-bits. Useful or interop.
    func getHashCode32() -> int
        return getLower32Bits(self) ^ getUpper32Bits(self)
    end

    # Returns the unsigned quotient of dividing self by
    # the second argument, where each argument and the result is interpreted as
    # an unsigned value.
    func divideUnsigned(divisor: int) -> int
        if division >= 0 then
            let q: int = (self >>>> 1) / divisor << 1
            let r: int = self - q * divisor
            return q + ((r | ~(r - divisor)) >>>> 63)
        end
        return (self & ~(self - divisor)) >>>> 63
    end

    # Returns the unsigned remainder from dividing <self>
    # by the second argument, where each argument and the result is interpreted
    # as an unsigned value.
    func remainderUnsigned(divisor: int) -> int
        if divisor >= 0 then
            let q: int = (self >>>> 1) / divisor << 1
            let r: int = self - q * divisor
            return r - ((~(r - divisor) >> 63) & divisor)
        end
        return self - (((self & ~(self - divisor)) >> 63) & divisor)
    end

    # Returns the number of one-bits in the two's complement binary representation of <self>.
    func popCount() -> int
        let i: int = self
        i = i - ((i >>>> 1) & 0x5555555555555555)
        i = (i & 0x3333333333333333) + ((i >>>> 2) & 0x3333333333333333)
        i = (i + (i >>>> 4)) & 0x0f0f0f0f0f0f0f0f
        i = i + (i >>>> 8)
        i = i + (i >>>> 16)
        i = i + (i >>>> 32)
        return i & 0x7f
    end

    # Returns the value obtained by reversing the order of the bits in the
    # two's complement binary representation of <self>.
    func reverse() -> int
        let i: int = self
        i = (i & 0x5555555555555555) << 1 | (i >>>> 1) & 0x5555555555555555
        i = (i & 0x3333333333333333) << 2 | (i >>>> 2) & 0x3333333333333333
        i = (i & 0x0f0f0f0f0f0f0f0f) << 4 | (i >>>> 4) & 0x0f0f0f0f0f0f0f0f
        return i.reverseBytes()
    end

    # Returns the value obtained by reversing the order of the bytes in the
    # two's complement representation of <self>.
    func reverseBytes() -> int
        let i: int = self
        i = (i & 0x00ff00ff00ff00ff) << 8 | (i >>>> 8) & 0x00ff00ff00ff00ff
        return (i << 48) | ((i & 0xffff0000) << 16) | ((i >>>> 16) & 0xffff0000) | (i >>>> 48)
    end

    # Returns the signum function of <self>.
    # The return value is -1 if the specified value is negative; 0 if the
    # specified value is zero; and 1 if the specified value is positive.
    func signum() -> int
        return ((self >> 63) | (-self >>>> 63))
    end

    # Returns true if self is within the interval (inclusive).
    func isWithin(from: int, to: int) -> int
        return self >= from and self <= to
    end

    override func getHashCode() -> int
        return self
    end
end
